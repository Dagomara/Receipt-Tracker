
// Allows users to change their names.
// Input: username, newName
// Result: updates user info & returns confirmation. 
router.patch('/changeName', cors(corsOptionsDelegate), async (req, res) => 
{
  // Will be used when the user first signs in OR wants to change profile
  // incoming: discordID, username, gender, school
  // outgoing: edited profile

  let discordID = req.body.discordID;

  await User.findOneAndUpdate({discordID:discordID},
    { $set:{
      name: req.body.name
    }}
  );

  // Returning the edited profile
  await User.find({discordID:discordID})
  .then( (users, err) => {
    if (!err) {
      if (users.length > 0) {
        let ret = {discordID:users[0].discordID,username:users[0].username,gender:users[0].gender,school:users[0].school,tag:users[0].tag};
        res.status(200).json(ret);
      }
      else
        console.log("issue found", users);
    }
    else {
      throw err;
    }
  }).catch(function(err) {
    res.status(400).json({"error": err});
  });
});

router.post('/getCompanies', cors(corsOptionsDelegate), async (req, res, next) => 
{
  // incoming: discordID
  // outgoing: blocked

  let {discordID} = req.body;

  await User.find({discordID:discordID})
  .then( (users, err) => {
    if (!err) {
      if (users.length > 0)
        res.status(200).json(users[0].blocked);  
      else {
        console.log("Request issue. Telling user to retry...");
        throw "Try try reloading!";
      }
    }
    else
      throw err;
  }).catch(function(err) {
    res.status(400).json({"error": err});
  });
});

router.delete('/deleteCompany', cors(corsOptionsDelegate), async (req, res, next) => 
{
  // incoming: discordID, friendDiscordID
  // outgoing: updated friend list

  let {discordID, friends} = req.body;

  await User.findOneAndUpdate({discordID:discordID}, { $pull:{friends:friends}});

  // Return updated friends
  await User.find({discordID:discordID})
  .then( (users, err) => {
    if (!err) {
      if (users.length > 0)
        res.status(200).json(users[0].friends);  
      else
        console.log("issue found", users);
    }
    else
      throw err;
  }).catch(function(err) {
    res.status(400).json({"error": err});
  });
});

router.put('/addCompany', cors(corsOptionsDelegate), async (req, res, next) => 
{
  // incoming: discordID, blockedDiscordID
  // outgoing: updated blocked list

  let {discordID, blocked} = req.body;

  try{
    await User.findOneAndUpdate({discordID:discordID}, { $push:{blocked:blocked}});
    let removeAsFriend = await User.find({discordID:discordID}, {friends:blocked});
    if (removeAsFriend[0].friends.length > 0){
      await User.findOneAndUpdate({discordID:discordID}, { $pull:{friends:blocked}});
    }
  }catch(err) {
    res.status(400).json({"error": err});
  };

  // Return updated blocked list
  await User.find({discordID:discordID})
  .then( (users, err) => {
    if (!err) {
      if (users.length > 0)
        res.status(200).json(users[0].blocked);  
      else
        console.log("issue found", users);
    }
    else
      throw err;
  }).catch(function(err) {
    res.status(400).json({"error": err});
  });
});

posts = [
  {
    username: 'coolbeans',
    article: 'aksjdf;lkj'
  },
  {
    username: 'not_coolbeands',
    article: 'jalk;scniejfk'
  }
]
router.get('/testGetPosts', cors(corsOptionsDelegate), authenticateToken, async (req, res, next) => 
{
  res.json(posts.filter(post => post.username === req.user.username));
});